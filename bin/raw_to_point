#!/usr/bin/env python

import sys
import pika
import struct
import argparse
import ConfigParser
import dateutil.parser
from pprint import pprint
from datetime import datetime

import lib.iot.tools as iot

parser = argparse.ArgumentParser(description='Get data from MQ and insert into MariaDB')
parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
args = parser.parse_args()

def callback(channel, method, properties, body):
    try:
        data = iot.parse_mq_payload(body)
    except struct.error as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

    try:
        pprint(data)
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return
    sys.exit(1)

mq_host='127.0.0.1'

credentials = pika.PlainCredentials('test', 'myonetest')

connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=mq_host,
        virtual_host="iot",
        credentials=credentials
    )
)

channel = connection.channel()
channel.basic_qos(prefetch_count=1)
result = channel.queue_declare(queue='rawpoints_in', durable=True)
channel.queue_bind(exchange='iot', queue=result.method.queue)
channel.basic_consume(callback, queue='rawpoints_in')

try:
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()
connection.close()
