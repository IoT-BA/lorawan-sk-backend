#!/usr/bin/env python

import sys
import json
import pika
import pytz
import struct
import requests
import ConfigParser
import dateutil.parser
from pprint import pprint
from datetime import datetime

# parses RawPoint to Point and inserts the data to Django using REST API call

def insert_into_django(post_payload):
    print("Sending this to Django:")
    pprint(post_payload)
    r = requests.post('http://lorawan.sk:8000/api/points/save/', data = json.dumps(post_payload))
    print("Done sending")
    return

def point_callback(channel, method, properties, body):
    data = json.loads(body)

    print"RAW DATA:" 
    pprint(data)

    data['gw_timestamp'] = str(data['gw_timestamp'])
    data['payload'] = str(data['payload'])

    pl = data['payload'].decode('hex')

    data['parsed'] = {}
    data['parsed']['serial'] = struct.unpack('H', pl[1:3])[0]
    data['parsed']['key']    = struct.unpack('H', pl[3:5])[0]
    data['parsed']['value']  = struct.unpack('f', pl[5:9])[0]

    print"DATA:" 
    pprint(data)

    try:
        insert_into_django(data) 
        print("OK: raw data sent to Django") 
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        print("Exception occured!")
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)

def rawpoint_callback(channel, method, properties, body):
    i = []
    data = json.loads(body)

    print"RAW DATA:" 
    pprint(data)

    i.append({ "node_id": str(struct.unpack('H', data['payload'].decode('hex')[1:3])[0]),
               "payload": str(data['payload']),
               "timestamp": (dateutil.parser.parse(data['gw_timestamp']).replace(tzinfo=None) - datetime(1970, 1, 1)).total_seconds(),
               "rssi": data['rssi'],
               "rowid": 1,
            })

    try:
        insert_into_django(i) 
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        raise

config = ConfigParser.RawConfigParser()
config.read('local.cfg')
mq_host='127.0.0.1'

credentials = pika.PlainCredentials('test', 'myonetest')

connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=mq_host,
        virtual_host="iot",
        credentials=credentials
    )
)

channel = connection.channel()
channel.basic_qos(prefetch_count=1)
result = channel.queue_declare(queue='for_django', durable=True)
channel.queue_bind(exchange='iot', queue=result.method.queue)
channel.basic_consume(rawpoint_callback, queue='for_django')
try:
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()
connection.close()
