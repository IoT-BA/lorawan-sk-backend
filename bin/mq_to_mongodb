#!/usr/bin/env python

import sys
import json
import pika
import pytz
import struct
import random
import ConfigParser
import dateutil.parser
from pprint import pprint
from datetime import datetime
from pymongo import MongoClient

def insert_into_mongodb(data):
    global mongodb_coll

    json_body = {
        "node_serial": data['parsed']['serial'],
        "gw_serial": data['gw_serial'],
        "key": data['parsed']['key'],
        "time": dateutil.parser.parse(data['gw_timestamp']),
        "value": data['parsed']['value'],
        "rssi": data['rssi'],
    }

    print("Write points: {0}".format(json_body))
    ret = mongodb_coll.insert_one(json_body)
    if not ret.inserted_id:
        raise Exception("Unable to insert data into MongoDB")
    else:
        print("Done: " + str(ret.inserted_id))

def callback(channel, method, properties, body):
    try:
        data = json.loads(body)
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

    data['gw_timestamp'] = str(data['gw_timestamp'])
    data['payload'] = str(data['payload'])
    data['gw_serial'] = int(data['gw_serial'])

    pl = data['payload'].decode('hex')

    try:
        data['parsed'] = {}
        data['parsed']['serial'] = struct.unpack('H', pl[1:3])[0]
        data['parsed']['key']    = struct.unpack('H', pl[3:5])[0]
        data['parsed']['value']  = struct.unpack('f', pl[5:9])[0]
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

    try:
        insert_into_mongodb(data)
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return


print("Connecting to MongoDB")
mongodb_client = MongoClient()
mongodb_db = mongodb_client.iot
mongodb_coll = mongodb_db.lora

print("Connecting to RabbitMQ")
mq_host='127.0.0.1'
credentials = pika.PlainCredentials('test', 'myonetest')
connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=mq_host,
        virtual_host="iot",
        credentials=credentials
    )
)

channel = connection.channel()
channel.basic_qos(prefetch_count=1)
result = channel.queue_declare(queue='for_mongodb', durable=True)
channel.queue_bind(exchange='iot', queue=result.method.queue)
channel.basic_consume(callback, queue='for_mongodb')

try:
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()

connection.close()
