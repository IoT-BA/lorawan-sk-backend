#!/usr/bin/python

import sys
import time
import json
import socket
import struct
import base64
import argparse
import requests
from pprint import pprint 
from datetime import datetime
import paho.mqtt.client as mqtt # mosquitto.py is deprecated


parser = argparse.ArgumentParser(description='Semtech LoRaWAN packet forwarder listener')
parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
args = parser.parse_args()
 
UDP_IP = ""
UDP_PORT = 1700 

packet_types = ( 'PKT_PUSH_DATA', 'PKT_PUSH_ACK', 'PKT_PULL_DATA', 'PKT_PULL_RESP', 'PKT_PULL_ACK' )

info = {}

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))

print("Listener started")

mqttc = mqtt.Client(client_id="ioana", protocol=mqtt.MQTTv31)
mqttc.connect("127.0.0.1", 1883, 60)
mqttc.loop_start()

while True:
    data, addr = sock.recvfrom(4000)
    dt = datetime.now()

    info = {}

    info['data_hex']          = "".join("{:02x}".format(ord(c)) for c in data)
    info['protocol_version']  = ord(data[0])
    info['random_token']      = "".join("{:02x}".format(ord(c)) for c in data[1:3]) 
    info['packet_type']       = struct.unpack("B", data[3])[0] 
    info['packet_type_human'] = packet_types[struct.unpack("B", data[3])[0]]
    info['gateway_mac_ident'] = "".join("{:02x}".format(ord(c)) for c in data[4:12]) 

    if 'PKT_PULL_DATA' in info['packet_type_human']:
        print("PKT_PULL_DATA packet...we respond with PULL_ACK")
        mqttc.publish("iot", "PKT_PULL_DATA packet...we respond with PULL_ACK")
        pull_ack = []
        pull_ack.append(ord(data[0]))
        pull_ack.append(ord(data[1]))
        pull_ack.append(ord(data[2]))
        pull_ack.append(0x04)
        sock.sendto("".join(chr(c) for c in pull_ack), addr)
        continue

    try:
        info['i'] = json.loads("".join("{:02x}".format(ord(c)) for c in data[12:]).decode('hex'))
    except Exception as e:
        pprint(info)
        print("ERROR: Unable to load JSON from packet...skipping")
        mqttc.publish("iot", "ERROR: Unable to load JSON from packet...skipping")
        continue 

    if 'stat' in info['i']:
        print("Gateway status packet...skipping")
        mqttc.publish("iot", "Gateway status packet...skipping")
        #pprint(info['i'])
        continue

    print(str(dt.isoformat("T")) + " received packet from forwarder (protocol version " + str(info['protocol_version']) + "). Packet type: " + info['packet_type_human'])
    mqttc.publish("iot", str(dt.isoformat("T")) + " received packet from forwarder (protocol version " + str(info['protocol_version']) + "). Packet type: " + info['packet_type_human'])
    pprint(info)

    if 'rxpk' in info['i']:
        '''The 'data' payload is actually a PHYPayload from LoRaWAN spec.

        ''' 

        d = info['i']['rxpk'][0]['data']

        info['PHYPayload'] = []
        for c in base64.decodestring(d):
            info['PHYPayload'].append(ord(c))

        PHYPayload_hex = "".join("{:02x}".format(c) for c in info['PHYPayload'])
        MHDR       = info['PHYPayload'][0]
        MACPayload = info['PHYPayload'][1:-4]
        MIC        = info['PHYPayload'][-4:]

        MType = MHDR >> 5

        #info['DevAddr']   = "".join("{:02x}".format(info['FHDR'][c]) for c in range(3,-1,-1))
        #info['FCnt']      = struct.unpack("<H", "".join(chr(c) for c in info['FHDR'][5:7]))[0] 
        #info['FCtrl']     = info['FHDR'][4]

        #payload = ''.join("{:02x}".format(c) for c in info['FRMPayload'])

        # join-request packet
        if MType == 0:
            AppEUI   = info['PHYPayload'][1:9]
            DevEUI   = info['PHYPayload'][9:17]
            DevNonce = info['PHYPayload'][17:19]
            print("join-request message") 
            print("PHYPayload_hex: " + "".join("{:02x}".format(c) for c in info['PHYPayload']))
            print("AppEUI:   " + "".join("{:02x}".format(c) for c in AppEUI))
            print("DevEUI:   " + "".join("{:02x}".format(c) for c in DevEUI))
            print("DevNonce: " + "".join("{:02x}".format(c) for c in DevNonce))
            continue

        try:
            r = requests.post('http://lorawan.sk:8000/api/lorawan/save', json=info)
        except Exception as e:
            pass
