#!/usr/bin/env python

import sys
import json
import pika
import pytz
import struct
import random
import ConfigParser
import dateutil.parser
from pprint import pprint
from datetime import datetime
from influxdb import InfluxDBClient

def insert_into_influxdb(data):
    global influxdb_client

    json_body = [
        {
            "measurement": "point",
            "tags": {
                "node_serial": str(data['parsed']['serial']),
                "gw_serial": str(data['gw_serial']),
                "key": str(data['parsed']['key']),
            },
            "time": dateutil.parser.parse(data['gw_timestamp']),
            "fields": {
                "value": data['parsed']['value'],
                "rssi": data['rssi'],
            }
        }
    ]

    print("Write points: {0}".format(json_body))
    ret = influxdb_client.write_points(json_body)
    if not ret:
        raise Exception("Unable to insert data to InfluxDB")

def callback(channel, method, properties, body):
    try:
        data = json.loads(body)
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

    data['gw_timestamp'] = str(data['gw_timestamp'])
    data['payload'] = str(data['payload'])
    data['gw_serial'] = int(data['gw_serial'])

    pl = data['payload'].decode('hex')

    try:
        data['parsed'] = {}
        data['parsed']['serial'] = struct.unpack('H', pl[1:3])[0]
        data['parsed']['key']    = struct.unpack('H', pl[3:5])[0]
        data['parsed']['value']  = struct.unpack('f', pl[5:9])[0]
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

    try:
        insert_into_influxdb(data)
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=True)
        raise


host='localhost'
port=8086
user = 'root'
password = 'root'
dbname = 'example'
dbuser = 'smly'
dbuser_password = 'my_secret_password'
influxdb_client = InfluxDBClient(host, port, user, password, dbname)
#influxdb_client.drop_database(dbname)
print("Create database: " + dbname)
influxdb_client.create_database(dbname)
influxdb_client.create_retention_policy('awesome_policy', '3d', 3, default=True)
print("Switch user: " + dbuser)
influxdb_client.switch_user(dbuser, dbuser_password)

mq_host='127.0.0.1'
credentials = pika.PlainCredentials('test', 'myonetest')
connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=mq_host,
        virtual_host="iot",
        credentials=credentials
    )
)

channel = connection.channel()
channel.basic_qos(prefetch_count=1)
result = channel.queue_declare(queue='for_influxdb', durable=True)
channel.queue_bind(exchange='iot', queue=result.method.queue)
channel.basic_consume(callback, queue='for_influxdb')

try:
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()

connection.close()
