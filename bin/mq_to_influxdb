#!/usr/bin/env python

import sys
import pika
import pytz
import argparse
import ConfigParser
import dateutil.parser
from pprint import pprint
from datetime import datetime
from influxdb import InfluxDBClient

import lib.iot.tools as iot

parser = argparse.ArgumentParser(description='Get data from MQ and insert into InfluxDB')
parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
args = parser.parse_args()

def insert_into_influxdb(data):
    global influxdb_client


    if data['parsed']['serial'] > 100:
        print "This pasket is NOT ours!"
        lorawan_sk = 0
    else:
        lorawan_sk = 1

    json_body = [
        {
            "measurement": "point",
            "tags": {
                "node_serial": data['parsed']['serial'],
                "gw_serial": data['gw_serial'],
                "key": data['parsed']['key'],
                "lorawan_sk": lorawan_sk,
            },
            "time": dateutil.parser.parse(data['gw_timestamp']),
            "fields": {
                "value": data['parsed']['value'],
                "rssi": data['rssi'],
            }
        }
    ]

    if args.verbose:
        print("Point to insert: {0}".format(json_body))
    ret = influxdb_client.write_points(json_body)
    if not ret:
        raise Exception("Unable to insert data to InfluxDB")

def callback(channel, method, properties, body):
    data = iot.parse_mq_payload(body)

    try:
        insert_into_influxdb(data)
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=True)
        raise

host='localhost'
port=8086
user = 'root'
password = 'root'
dbname = 'example'
dbuser = 'smly'
dbuser_password = 'my_secret_password'
influxdb_client = InfluxDBClient(host, port, user, password, dbname)
#influxdb_client.drop_database(dbname)
print("Create database: " + dbname)
influxdb_client.create_database(dbname)
print("Switch user: " + dbuser)
influxdb_client.switch_user(dbuser, dbuser_password)

mq_host='127.0.0.1'
credentials = pika.PlainCredentials('test', 'myonetest')
connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=mq_host,
        virtual_host="iot",
        credentials=credentials
    )
)

channel = connection.channel()
channel.basic_qos(prefetch_count=1)
result = channel.queue_declare(queue='for_influxdb', durable=True)
channel.queue_bind(exchange='iot', queue=result.method.queue)
channel.basic_consume(callback, queue='for_influxdb')

try:
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()

connection.close()
