#!/usr/bin/env python

import pika
import MySQLdb
import argparse
import ConfigParser
import dateutil.parser
import struct
from pprint import pprint
from datetime import datetime

import lib.iot.tools as iot

parser = argparse.ArgumentParser(description='Get data from MQ and insert into MariaDB')
parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
args = parser.parse_args()

def insert_into_mysql(sql, data):
    global config
    if args.verbose:
        print(sql)
        pprint(data)
    try:
        print("Connecting to DB")
        db = MySQLdb.connect(host="localhost", db="iot", passwd=config.get('mysql','password'), user="iot" )
        db.time_zone = '+00:00'
        c = db.cursor()
        c.execute("SET @@TIME_ZONE='+00:00'")
        c.execute(sql % data) 
        db.commit()
        db.close()
    except Exception as e:
        db.close()
        raise(e)

def callback(channel, method, properties, body):
    try:
        data = iot.parse_mq_payload(body)
    except struct.error as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

    try:
        sql = """INSERT INTO raw_data (gw_serial, payload, rssi, gw_timestamp) VALUES (%s, '%s', %s, '%s')"""
        sql_data = (
            data['gw_serial'],
            data['payload'],
            data['rssi'],
            data['gw_timestamp'],
        )
        insert_into_mysql(sql, sql_data) 
        print("OK: raw data inserted into DB") 
        sal_data = ()

        sql = """INSERT INTO parsed_data (serial, _key, value, rssi, timestamp, gw_id, raw_packet) VALUES (%s, %s, %s, %s, '%s', %s, '%s')"""
        sql_data = ( 
            data['parsed']['serial'], 
            data['parsed']['key'],
            data['parsed']['value'],
            data['rssi'],
            data['gw_timestamp'],
            data['gw_serial'],
            data['payload'],
        )
        insert_into_mysql(sql, sql_data) 
        print("OK: parsed data inserted into DB") 
        channel.basic_ack(delivery_tag = method.delivery_tag)
    except Exception as e:
        print str(e)
        channel.basic_nack(delivery_tag = method.delivery_tag, requeue=False)
        return

config = ConfigParser.RawConfigParser()
config.read('local.cfg')
mq_host='127.0.0.1'

credentials = pika.PlainCredentials('test', 'myonetest')

connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        host=mq_host,
        virtual_host="iot",
        credentials=credentials
    )
)

channel = connection.channel()
channel.basic_qos(prefetch_count=1)
result = channel.queue_declare(queue='for_mysql', durable=True)
channel.queue_bind(exchange='iot', queue=result.method.queue)
channel.basic_consume(callback, queue='for_mysql')
try:
    channel.start_consuming()
except KeyboardInterrupt:
    channel.stop_consuming()
connection.close()
